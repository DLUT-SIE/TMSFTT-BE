'''Provide views for secure_file module.'''
import os.path as osp
from urllib.parse import quote, unquote

from django.http import HttpResponse
from django.conf import settings
from django.shortcuts import get_object_or_404
from django.apps import apps
from rest_framework import views, exceptions

from secure_file.utils import decrypt_file_download_url, infer_content_type
from infra.utils import prod_logger, dev_logger


class SecuredFileDownloadView(views.APIView):
    '''Provide logic for downloading files.

    Only `/media/<encrypted_path>` is allowed, this type of url is implicitly
    generated by SecureFileField() of a serializer, or explicitly generated
    by SecureFile.generate_secured_download_response().
    '''
    # pylint: disable=too-many-arguments
    def _verify_validity(self, request, model_name,
                         field_name, path, perm_name):
        '''Verify validity of the request.'''
        lookups = {field_name: path}
        instance = get_object_or_404(apps.get_model(model_name), **lookups)
        real_file = getattr(instance, field_name, None)
        if real_file is None or real_file.name != path:
            msg = f'文件路径无效: {path}'
            dev_logger.info(msg)
            raise exceptions.NotFound()
        if not request.user.has_perm(perm_name, instance):
            # If user has no permission, we simply return 404
            msg = (
                f'用户 {request.user.first_name}'
                f'(用户名: {request.user.username}) '
                f'尝试访问无权限文件: {path}'
            )
            prod_logger.info(msg)
            raise exceptions.NotFound()
        return real_file

    def get(self, request, encrypted_url):
        '''Decrypt, verify download request and redirect to download.'''
        try:
            (model_name, field_name,
             path, perm_name) = decrypt_file_download_url(encrypted_url)
        except Exception as exc:
            msg = f'加密链接解码失败: {exc}'
            dev_logger.info(msg)
            raise exceptions.NotFound()
        field_file = self._verify_validity(
            request, model_name, field_name, path, perm_name)
        basename = osp.basename(field_file.name)
        msg = (
            f'用户 {request.user.first_name}'
            f'(用户名: {request.user.username}) '
            f'请求下载文件: {unquote(path)}'
        )
        prod_logger.info(msg)
        response = HttpResponse(content_type=infer_content_type(basename))
        response['Content-Disposition'] = (
            f'attachment; filename={quote(basename)}'
        )
        if settings.DEBUG:
            try:
                response.content = field_file.read()
            except Exception as exc:
                msg = f'读取文件失败: {exc}'
                dev_logger.info(msg)
                raise exceptions.NotFound()
        else:
            response['X-Accel-Redirect'] = (
                f'/protected-files/{field_file.name}'
            )
        return response
